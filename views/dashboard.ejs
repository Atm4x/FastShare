<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель управления</title>
    <link rel="stylesheet" href="/dashboard-styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <header>
            <h1>Добро пожаловать, <%= username %>!</h1>
            <div>
                <button class="theme-toggle">Сменить тему</button>
                <a href="/logout" class="logout-btn">Выйти</a>
            </div>
        </header>
        
        <section class="upload-section">
            <h2><i class="fas fa-cloud-upload-alt"></i> Загрузить файл</h2>
            <form action="/upload" method="POST" enctype="multipart/form-data" id="upload-form">
                <input type="file" name="file" id="file" required>
                <label for="file" class="file-label"><i class="fas fa-file-upload"></i> Выберите файл</label>
                <button type="submit"><i class="fas fa-upload"></i> Загрузить</button>
            </form>
            <div id="progress-bar-container" style="display: none;">
                <div id="progress-bar"></div>
            </div>
        </section>

        <section class="files-section">
            <h2><i class="fas fa-folder-open"></i> Ваши файлы</h2>
            <div class="file-grid">
                <% files.forEach(file => { %>
                    <div class="file-item" data-filename="<%= file %>">
                        <div class="file-preview">
                            <% 
                            const fileExtension = file.split('.').pop().toLowerCase();
                            let iconClass = 'fas fa-file';
                            
                            if (['jpeg', 'jpg', 'gif', 'png', 'webp'].includes(fileExtension)) { %>
                                <img src="/download/<%= file %>" alt="<%= file %>" class="preview-image">
                            <% } else if (['mp4', 'webm', 'ogg', 'mov'].includes(fileExtension)) { %>
                                <canvas class="video-thumbnail" data-video="/download/<%= file %>"></canvas>
                            <% } else if (['mp3', 'wav', 'ogg'].includes(fileExtension)) { %>
                                <i class="fas fa-file-audio"></i>
                            <% } else {
                                switch(fileExtension) {
                                    case 'pdf':
                                        iconClass = 'fas fa-file-pdf';
                                        break;
                                    case 'doc':
                                    case 'docx':
                                        iconClass = 'fas fa-file-word';
                                        break;
                                    case 'xls':
                                    case 'xlsx':
                                        iconClass = 'fas fa-file-excel';
                                        break;
                                    case 'ppt':
                                    case 'pptx':
                                        iconClass = 'fas fa-file-powerpoint';
                                        break;
                                    case 'zip':
                                    case 'rar':
                                    case '7z':
                                        iconClass = 'fas fa-file-archive';
                                        break;
                                    case 'txt':
                                        iconClass = 'fas fa-file-alt';
                                        break;
                                    default:
                                        iconClass = 'fas fa-file';
                                }
                            %>
                                <i class="<%= iconClass %>"></i>
                            <% } %>
                        </div>
                        <div class="file-info">
                            <span class="file-name"><%= file %></span>
                            <input type="text" class="file-rename-input" style="display:none;" value="<%= file %>">
                            <div class="file-actions">
                              <button class="rename-btn" title="Переименовать">
                                <i class="fas fa-edit"></i>
                              </button>
                              <a href="/download/<%= file %>" class="download-btn" title="Скачать">
                                <i class="fas fa-download"></i>
                              </a>
                              <form action="/delete/<%= file %>" method="POST" class="delete-form">
                                <button type="submit" class="delete-btn" title="Удалить">
                                  <i class="fas fa-trash-alt"></i>
                                </button>
                              </form>
                            </div>
                          </div>
                    </div>
                <% }); %>
            </div>

            <button id="create-text-file-btn" class="btn">Создать текстовый файл</button>

            <div id="text-editor-modal" class="modal">
                <div class="modal-content">
                  <h2 id="text-editor-title">Создать текстовый файл</h2>
                  <input type="text" id="text-file-name" placeholder="Имя файла">
                  <textarea id="text-file-content"></textarea>
                  <button id="save-text-file-btn">Сохранить</button>
                  <button id="close-text-editor-btn">Закрыть</button>
                </div>
              </div>
        </section>
    </div>

    <div id="preview-modal" class="modal">
        <span class="close">&times;</span>
        <div id="preview-content"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
<script>
    document.getElementById('file').addEventListener('change', function(e) {
        var fileName = e.target.files[0].name;
        document.querySelector('.file-label').innerHTML = '<i class="fas fa-file-upload"></i> ' + fileName;
    });

    document.addEventListener('DOMContentLoaded', function() {
        const canvases = document.querySelectorAll('.video-thumbnail');
        
        canvases.forEach(canvas => {
            const video = document.createElement('video');
            video.src = canvas.dataset.video;
            
            video.onloadeddata = function() {
                video.currentTime = 1; // Устанавливаем время на 1 секунду для получения кадра
            };

            video.onseeked = function() {
                const ctx = canvas.getContext('2d');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                URL.revokeObjectURL(video.src); // Освобождаем память
            };
        });
    });

    document.getElementById('upload-form').addEventListener('submit', function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        var progressBar = document.getElementById('progress-bar');
        var progressBarContainer = document.getElementById('progress-bar-container');

        axios.post('/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        }).then(function(response) {
            progressBarContainer.style.display = 'block';
            var progress = 0;
            var interval = setInterval(function() {
                progress += 10;
                progressBar.style.width = progress + '%';
                if (progress >= 100) {
                    clearInterval(interval);
                    setTimeout(function() {
                        window.location.reload();
                    }, 500);
                }
            }, 100);
        }).catch(function(error) {
            console.error('Error:', error);
            alert('Произошла ошибка при загрузке файла');
        });
    });

    // Обработка клика по файлу
    document.querySelectorAll('.file-item').forEach(item => {
  item.addEventListener('click', function(e) {
    if (e.target.closest('.file-actions') || e.target.classList.contains('file-rename-input')) return;
    
    const fileName = this.dataset.filename;
    const fileExtension = fileName.split('.').pop().toLowerCase();
    
    // Проверяем, является ли файл текстовым или без расширения
    if (fileExtension === 'txt' || fileName.indexOf('.') === -1) {
      openTextEditor(fileName);
    } else {
      // Существующий код для предпросмотра других типов файлов
      const modal = document.getElementById('preview-modal');
      const previewContent = document.getElementById('preview-content');
      
      if (['jpeg', 'jpg', 'gif', 'png', 'webp'].includes(fileExtension)) {
        previewContent.innerHTML = `<img src="/download/${fileName}" alt="${fileName}" class="preview-image">`;
      } else if (['mp4', 'webm', 'ogg', 'mov'].includes(fileExtension)) {
        previewContent.innerHTML = `<video src="/download/${fileName}" controls class="preview-video"></video>`;
      } else if (['mp3', 'wav', 'ogg'].includes(fileExtension)) {
        previewContent.innerHTML = `<audio src="/download/${fileName}" controls class="preview-audio"></audio>`;
      } else {
        previewContent.innerHTML = `<div class="preview-text">Предпросмотр недоступен для этого типа файла</div>`;
      }
      
      modal.style.display = 'block';
    }
  });
});

    // Закрытие модального окна
    document.querySelector('.close').addEventListener('click', closeModal);

    // Закрытие модального окна при клике вне его
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('preview-modal');
        if (event.target == modal) {
            closeModal();
        }
    });

    function closeModal() {
        const modal = document.getElementById('preview-modal');
        const previewContent = document.getElementById('preview-content');
        modal.style.display = 'none';
        
        // Остановка видео при закрытии
        const videoElement = previewContent.querySelector('video');
        if (videoElement) {
            videoElement.pause();
            videoElement.currentTime = 0;
        }
    }

    // Добавьте эту функцию в начало вашего скрипта
function toggleTheme() {
    document.body.classList.toggle('light-theme');
    const isDark = !document.body.classList.contains('light-theme');
    localStorage.setItem('darkTheme', isDark);
}

// Добавьте эту проверку при загрузке страницы
document.addEventListener('DOMContentLoaded', (event) => {
    const isDark = localStorage.getItem('darkTheme') === 'true';
    if (isDark) {
        document.body.classList.remove('light-theme');
    } else {
        document.body.classList.add('light-theme');
    }
});

// Функция для переименования файла
document.querySelectorAll('.rename-btn').forEach(btn => {
  btn.addEventListener('click', function(e) {
    e.stopPropagation();
    const fileItem = this.closest('.file-item');
    const nameSpan = fileItem.querySelector('.file-name');
    const inputField = fileItem.querySelector('.file-rename-input');
    
    nameSpan.style.display = 'none';
    inputField.style.display = 'inline-block';
    inputField.value = nameSpan.textContent;
    inputField.focus();
  });
});

document.querySelectorAll('.file-rename-input').forEach(input => {
  input.addEventListener('blur', function() {
    renameFile(this);
  });

  input.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      this.blur();
    }
  });
});

function renameFile(inputElement) {
  const oldName = inputElement.closest('.file-item').dataset.filename;
  const newName = inputElement.value.trim();
  
  if (oldName !== newName && newName !== '') {
    axios.post('/rename', { oldName, newName })
      .then(response => {
        if (response.data.success) {
          window.location.reload();
        } else {
          alert('Ошибка при переименовании файла: ' + (response.data.error || 'Неизвестная ошибка'));
          resetRenameInput(inputElement);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Произошла ошибка при переименовании файла: ' + (error.response?.data?.error || error.message));
        resetRenameInput(inputElement);
      });
  } else {
    resetRenameInput(inputElement);
  }
}

function resetRenameInput(inputElement) {
  const fileItem = inputElement.closest('.file-item');
  const nameSpan = fileItem.querySelector('.file-name');
  inputElement.style.display = 'none';
  nameSpan.style.display = 'inline-block';
}

// Обработчики событий для переименования
document.querySelectorAll('.rename-btn').forEach(btn => {
  btn.addEventListener('click', function(e) {
    e.stopPropagation();
    const fileItem = this.closest('.file-item');
    const nameSpan = fileItem.querySelector('.file-name');
    const inputField = fileItem.querySelector('.file-rename-input');
    
    nameSpan.style.display = 'none';
    inputField.style.display = 'inline-block';
    inputField.focus();
  });
});

document.querySelectorAll('.file-rename-input').forEach(input => {
  input.addEventListener('blur', function() {
    const oldName = this.value;
    const newName = this.value;
    if (oldName !== newName) {
      renameFile(oldName, newName);
    } else {
      this.style.display = 'none';
      this.previousElementSibling.style.display = 'inline-block';
    }
  });

  input.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      this.blur();
    }
  });
});

// Функции для работы с текстовыми файлами
const textEditorModal = document.getElementById('text-editor-modal');
const textEditorTitle = document.getElementById('text-editor-title');
const textFileName = document.getElementById('text-file-name');
const textFileContent = document.getElementById('text-file-content');
const saveTextFileBtn = document.getElementById('save-text-file-btn');
const closeTextEditorBtn = document.getElementById('close-text-editor-btn');

function openTextEditor(fileName) {
  textEditorTitle.textContent = fileName ? 'Редактировать файл' : 'Создать текстовый файл';
  textFileName.value = fileName;
  textFileName.disabled = !!fileName;
  
  if (fileName) {
    axios.get(`/get-text-file/${encodeURIComponent(fileName)}`)
      .then(response => {
        if (response.data.success) {
          textFileContent.value = response.data.content;
        } else {
          alert('Ошибка при чтении файла');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Произошла ошибка при чтении файла');
      });
  } else {
    textFileContent.value = '';
  }
  
  textEditorModal.style.display = 'block';
}

function closeTextEditor() {
  textEditorModal.style.display = 'none';
}

function saveTextFile() {
  const fileName = textFileName.value.trim();
  const content = textFileContent.value;
  
  if (!fileName) {
    alert('Please enter a file name');
    return;
  }
  
  const endpoint = '/create-text-file';
  
  axios.post(endpoint, { fileName, content }, {
    headers: {
      'Content-Type': 'application/json'
    }
  })
    .then(response => {
      if (response.data.success) {
        closeTextEditor();
        window.location.reload();
      } else {
        alert('Error saving file: ' + (response.data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while saving the file: ' + (error.response?.data?.error || error.message));
    });
}

document.getElementById('create-text-file-btn').addEventListener('click', () => openTextEditor());
closeTextEditorBtn.addEventListener('click', closeTextEditor);
saveTextFileBtn.addEventListener('click', saveTextFile);

// Добавьте обработчик события для кнопки переключения темы
document.querySelector('.theme-toggle').addEventListener('click', toggleTheme);
</script>
</body>
</html>