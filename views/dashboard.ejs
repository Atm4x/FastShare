<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель управления</title>
    <link rel="stylesheet" href="/dashboard-styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/libs/fflate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/STLLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FBXLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/OBJLoader.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.21/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <header>
            <h1>Добро пожаловать, <%= username %>!</h1>
            <div>
                <button class="theme-toggle">Сменить тему</button>
                <a href="/logout" class="logout-btn">Выйти</a>
            </div>
        </header>
        
        <section class="upload-section">
            <h2><i class="fas fa-cloud-upload-alt"></i> Загрузить файл</h2>
            <div id="drop-area">
              <p>Перетащите файлы сюда или нажмите для выбора</p>
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <form action="/upload" method="POST" enctype="multipart/form-data" id="upload-form">
                <input type="file" name="file" id="file" required>
                <label for="file" class="file-label"><i class="fas fa-file-upload"></i> Выберите файл</label>
                <button type="submit"><i class="fas fa-upload"></i> Загрузить</button>
            </form>
            <div id="progress-bar-container" style="display: none;">
                <div id="progress-bar"></div>
            </div>
        </section>

        <section class="files-section">
            <h2><i class="fas fa-folder-open"></i> Ваши файлы</h2>
            <div class="file-grid">
                <% files.forEach(file => { %>
                    <div class="file-item" data-filename="<%= file %>">
                        <div class="file-preview">
                            <% 
                            const fileExtension = file.split('.').pop().toLowerCase();
                            let iconClass = 'fas fa-file';
                            
                            if (['jpeg', 'jpg', 'gif', 'png', 'webp'].includes(fileExtension)) { %>
                                <img src="/download/<%= file %>" alt="<%= file %>" class="preview-image">
                            <% } else if (['mp4', 'webm', 'ogg', 'mov'].includes(fileExtension)) { %>
                                <canvas class="video-thumbnail" data-video="/download/<%= file %>"></canvas>
                            <% } else if (['mp3', 'wav', 'ogg'].includes(fileExtension)) { %>
                                <i class="fas fa-file-audio"></i>
                            <% } else {
                                switch(fileExtension) {
                                    case 'pdf':
                                        iconClass = 'fas fa-file-pdf';
                                        break;
                                    case 'doc':
                                    case 'docx':
                                        iconClass = 'fas fa-file-word';
                                        break;
                                    case 'xls':
                                    case 'xlsx':
                                        iconClass = 'fas fa-file-excel';
                                        break;
                                    case 'ppt':
                                    case 'pptx':
                                        iconClass = 'fas fa-file-powerpoint';
                                        break;
                                    case 'zip':
                                    case 'rar':
                                    case '7z':
                                        iconClass = 'fas fa-file-archive';
                                        break;
                                    case 'txt':
                                        iconClass = 'fas fa-file-alt';
                                        break;
                                    default:
                                        iconClass = 'fas fa-file';
                                }
                            %>
                                <i class="<%= iconClass %>"></i>
                            <% } %>
                        </div>
                        <div class="file-info">
                            <span class="file-name"><%= file %></span>
                            <input type="text" class="file-rename-input" style="display:none;" value="<%= file %>">
                            <div class="file-actions">
                              <button class="rename-btn" title="Переименовать">
                                <i class="fas fa-edit"></i>
                              </button>
                              <a href="/download/<%= file %>" class="download-btn" title="Скачать">
                                <i class="fas fa-download"></i>
                              </a>
                              <form action="/delete/<%= file %>" method="POST" class="delete-form">
                                <button type="submit" class="delete-btn" title="Удалить">
                                  <i class="fas fa-trash-alt"></i>
                                </button>
                              </form>
                            </div>
                          </div>
                    </div>
                <% }); %>
            </div>

            <button id="create-text-file-btn" class="btn">Создать текстовый файл</button>

            <div id="text-editor-modal" class="modal">
                <div class="modal-content">
                  <h2 id="text-editor-title">Создать текстовый файл</h2>
                  <input type="text" id="text-file-name" placeholder="Имя файла">
                  <textarea id="text-file-content"></textarea>
                  <button id="save-text-file-btn">Сохранить</button>
                  <button id="close-text-editor-btn">Закрыть</button>
                </div>
              </div>
        </section>
    </div>

    <div id="preview-modal" class="modal">
      <span class="close">&times;</span>
      <div id="preview-container">
          <div id="preview-content"></div>
      </div>
  </div>

<script>
    document.getElementById('file').addEventListener('change', function(e) {
        var fileName = e.target.files[0].name;
        document.querySelector('.file-label').innerHTML = '<i class="fas fa-file-upload"></i> ' + fileName;
    });

    document.addEventListener('DOMContentLoaded', function() {
        const canvases = document.querySelectorAll('.video-thumbnail');
        
        canvases.forEach(canvas => {
            const video = document.createElement('video');
            video.src = canvas.dataset.video;
            
            video.onloadeddata = function() {
                video.currentTime = 1; // Устанавливаем время на 1 секунду для получения кадра
            };

            video.onseeked = function() {
                const ctx = canvas.getContext('2d');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                URL.revokeObjectURL(video.src); // Освобождаем память
            };
        });
    });

    document.getElementById('upload-form').addEventListener('submit', function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        var progressBar = document.getElementById('progress-bar');
        var progressBarContainer = document.getElementById('progress-bar-container');

        axios.post('/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        }).then(function(response) {
            progressBarContainer.style.display = 'block';
            var progress = 0;
            var interval = setInterval(function() {
                progress += 10;
                progressBar.style.width = progress + '%';
                if (progress >= 100) {
                    clearInterval(interval);
                    setTimeout(function() {
                        window.location.reload();
                    }, 500);
                }
            }, 100);
        }).catch(function(error) {
            console.error('Error:', error);
            alert('Произошла ошибка при загрузке файла');
        });
    });


    // Закрытие модального окна
    document.querySelector('.close').addEventListener('click', closeModal);

    // Закрытие модального окна при клике вне его
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('preview-modal');
        if (event.target == modal) {
            closeModal();
        }
    });

    function closeModal() {
        const modal = document.getElementById('preview-modal');
        const previewContent = document.getElementById('preview-content');
        modal.style.display = 'none';
        
        // Остановка видео при закрытии
        const videoElement = previewContent.querySelector('video');
        if (videoElement) {
            videoElement.pause();
            videoElement.currentTime = 0;
        }
    }

    // Добавьте эту функцию в начало вашего скрипта
function toggleTheme() {
    document.body.classList.toggle('light-theme');
    const isDark = !document.body.classList.contains('light-theme');
    localStorage.setItem('darkTheme', isDark);
}

// Добавьте эту проверку при загрузке страницы
document.addEventListener('DOMContentLoaded', (event) => {
    const isDark = localStorage.getItem('darkTheme') === 'true';
    if (isDark) {
        document.body.classList.remove('light-theme');
    } else {
        document.body.classList.add('light-theme');
    }
});

// Функция для переименования файла
document.querySelectorAll('.rename-btn').forEach(btn => {
  btn.addEventListener('click', function(e) {
    e.stopPropagation();
    const fileItem = this.closest('.file-item');
    const nameSpan = fileItem.querySelector('.file-name');
    const inputField = fileItem.querySelector('.file-rename-input');
    
    nameSpan.style.display = 'none';
    inputField.style.display = 'inline-block';
    inputField.value = nameSpan.textContent;
    inputField.focus();
  });
});

document.querySelectorAll('.file-rename-input').forEach(input => {
  input.addEventListener('blur', function() {
    renameFile(this);
  });

  input.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      this.blur();
    }
  });
});

function renameFile(inputElement) {
  const oldName = inputElement.closest('.file-item').dataset.filename;
  const newName = inputElement.value.trim();
  
  if (oldName !== newName && newName !== '') {
    axios.post('/rename', { oldName, newName })
      .then(response => {
        if (response.data.success) {
          window.location.reload();
        } else {
          alert('Ошибка при переименовании файла: ' + (response.data.error || 'Неизвестная ошибка'));
          resetRenameInput(inputElement);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Произошла ошибка при переименовании файла: ' + (error.response?.data?.error || error.message));
        resetRenameInput(inputElement);
      });
  } else {
    resetRenameInput(inputElement);
  }
}

function resetRenameInput(inputElement) {
  const fileItem = inputElement.closest('.file-item');
  const nameSpan = fileItem.querySelector('.file-name');
  inputElement.style.display = 'none';
  nameSpan.style.display = 'inline-block';
}

// Обработчики событий для переименования
document.querySelectorAll('.rename-btn').forEach(btn => {
  btn.addEventListener('click', function(e) {
    e.stopPropagation();
    const fileItem = this.closest('.file-item');
    const nameSpan = fileItem.querySelector('.file-name');
    const inputField = fileItem.querySelector('.file-rename-input');
    
    nameSpan.style.display = 'none';
    inputField.style.display = 'inline-block';
    inputField.focus();
  });
});

document.querySelectorAll('.file-rename-input').forEach(input => {
  input.addEventListener('blur', function() {
    const oldName = this.value;
    const newName = this.value;
    if (oldName !== newName) {
      renameFile(oldName, newName);
    } else {
      this.style.display = 'none';
      this.previousElementSibling.style.display = 'inline-block';
    }
  });

  input.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      this.blur();
    }
  });
});

// Функции для работы с текстовыми файлами
const textEditorModal = document.getElementById('text-editor-modal');
const textEditorTitle = document.getElementById('text-editor-title');
const textFileName = document.getElementById('text-file-name');
const textFileContent = document.getElementById('text-file-content');
const saveTextFileBtn = document.getElementById('save-text-file-btn');
const closeTextEditorBtn = document.getElementById('close-text-editor-btn');

function openTextEditor(fileName) {
  textEditorTitle.textContent = fileName ? 'Редактировать файл' : 'Создать текстовый файл';
  textFileName.value = fileName;
  textFileName.disabled = !!fileName;
  
  if (fileName) {
    axios.get(`/get-text-file/${encodeURIComponent(fileName)}`)
      .then(response => {
        if (response.data.success) {
          textFileContent.value = response.data.content;
        } else {
          alert('Ошибка при чтении файла');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Произошла ошибка при чтении файла');
      });
  } else {
    textFileContent.value = '';
  }
  
  textEditorModal.style.display = 'block';
}

function closeTextEditor() {
  textEditorModal.style.display = 'none';
}

function saveTextFile() {
  const fileName = textFileName.value.trim();
  const content = textFileContent.value;
  
  if (!fileName) {
    alert('Please enter a file name');
    return;
  }
  
  const endpoint = '/create-text-file';
  
  axios.post(endpoint, { fileName, content }, {
    headers: {
      'Content-Type': 'application/json'
    }
  })
    .then(response => {
      if (response.data.success) {
        closeTextEditor();
        window.location.reload();
      } else {
        alert('Error saving file: ' + (response.data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while saving the file: ' + (error.response?.data?.error || error.message));
    });
}

document.getElementById('create-text-file-btn').addEventListener('click', () => openTextEditor());
closeTextEditorBtn.addEventListener('click', closeTextEditor);
saveTextFileBtn.addEventListener('click', saveTextFile);

// Добавьте обработчик события для кнопки переключения темы
document.querySelector('.theme-toggle').addEventListener('click', toggleTheme);

// Добавьте эти функции после существующего кода


let scene, camera, renderer, object, controls;

function initThreeJS() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth * 0.8, window.innerHeight * 0.8);
    renderer.setPixelRatio(window.devicePixelRatio);
    document.getElementById('preview-content').appendChild(renderer.domElement);

    // Создаем OrbitControls
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.enableZoom = true;

    // Устанавливаем начальную позицию камеры
    camera.position.z = 5;

    // Добавляем обработчик изменения размера окна
    window.addEventListener('resize', onWindowResize, false);
}

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth * 0.8, window.innerHeight * 0.8);
}
function loadModel(url, fileExtension) {
    let loader;
    switch (fileExtension) {
        case 'stl':
            loader = new THREE.STLLoader();
            break;
        case 'glb':
        case 'gltf':
            loader = new THREE.GLTFLoader();
            break;
        case 'fbx':
            loader = new THREE.FBXLoader();
            break;
        case 'obj':
            loader = new THREE.OBJLoader();
            break;
        case 'usd':
        case 'usdc':
        case 'usdz':
            loader = new THREE.USDZLoader();
            break;
        default:
            console.error('Unsupported file format');
            return;
    }

    loader.load(url, function(loadedObject) {
        if (object) scene.remove(object);
        
        switch (fileExtension) {
            case 'stl':
                const material = new THREE.MeshPhongMaterial({ color: 0xAAAAAA, specular: 0x111111, shininess: 200 });
                object = new THREE.Mesh(loadedObject, material);
                break;
            case 'glb':
            case 'gltf':
                object = loadedObject.scene;
                break;
            case 'fbx':
            case 'obj':
            case 'usd':
            case 'usdc':
            case 'usdz':
                object = loadedObject;
                break;
        }

        scene.add(object);

        // Центрирование и масштабирование объекта
        const box = new THREE.Box3().setFromObject(object);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());

        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = camera.fov * (Math.PI / 180);
        let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));

        camera.position.z = cameraZ * 1.5;

        const minZ = box.min.z;
        const cameraToFarEdge = minZ < 0 ? -minZ + cameraZ : cameraZ - minZ;

        camera.far = cameraToFarEdge * 3;
        camera.updateProjectionMatrix();

        object.position.x = -center.x;
        object.position.y = -center.y;
        object.position.z = -center.z;

        // Сброс OrbitControls
        controls.target.set(0, 0, 0);
        controls.update();

        // Добавляем освещение, если его еще нет
        if (!scene.getObjectByName('ambient_light')) {
            const ambientLight = new THREE.AmbientLight(0x404040);
            ambientLight.name = 'ambient_light';
            scene.add(ambientLight);
        }
        if (!scene.getObjectByName('directional_light')) {
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
            directionalLight.position.set(1, 1, 1).normalize();
            directionalLight.name = 'directional_light';
            scene.add(directionalLight);
        }

    }, 
    // Функция прогресса загрузки
    function(xhr) {
        console.log((xhr.loaded / xhr.total * 100) + '% loaded');
    },
    // Функция обработки ошибок
    function(error) {
        console.error('An error occurred while loading the model:', error);
    });
}

let isOpened = false;

function animate() {
    if(!isOpened) return;

    requestAnimationFrame(animate);
    controls.update(); // Обновляем OrbitControls
    renderer.render(scene, camera);
}

async function loadPDF(url) {
    const loadingTask = pdfjsLib.getDocument(url);
    const pdf = await loadingTask.promise;
    const page = await pdf.getPage(1);
    const scale = 1.5;
    const viewport = page.getViewport({ scale });

    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    const renderContext = {
        canvasContext: context,
        viewport: viewport
    };
    await page.render(renderContext);

    const previewContent = document.getElementById('preview-content');
    previewContent.innerHTML = '';
    const pdfContainer = document.createElement('div');
    pdfContainer.className = 'doc-container';
    pdfContainer.appendChild(canvas);
    previewContent.appendChild(pdfContainer);
}

async function loadDocument(url, fileExtension) {
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    let result;

    if (fileExtension === 'docx') {
        result = await mammoth.convertToHtml({ arrayBuffer: arrayBuffer });
    } else if (['odt', 'rtf', 'txt'].includes(fileExtension)) {
        const text = new TextDecoder().decode(arrayBuffer);
        result = { value: `<pre>${text}</pre>` };
    } else {
        throw new Error('Unsupported document format');
    }

    const previewContent = document.getElementById('preview-content');
    previewContent.innerHTML = '';
    const docContainer = document.createElement('div');
    docContainer.className = 'doc-container';
    docContainer.innerHTML = result.value;
    previewContent.appendChild(docContainer);
}

async function loadExcel(url) {
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const workbook = XLSX.read(arrayBuffer, { type: 'array' });
    
    const firstSheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[firstSheetName];
    
    const html = XLSX.utils.sheet_to_html(worksheet);
    
    const previewContent = document.getElementById('preview-content');
    previewContent.innerHTML = '';
    const excelContainer = document.createElement('div');
    excelContainer.className = 'excel-container';
    excelContainer.innerHTML = html;
    previewContent.appendChild(excelContainer);
}

// Обновите обработчик клика по элементу файла
document.querySelectorAll('.file-item').forEach(item => {
    item.addEventListener('click', async function(e) {
        if (e.target.closest('.file-actions') || e.target.classList.contains('file-rename-input')) return;
        
        const fileName = this.dataset.filename;
        const fileExtension = fileName.split('.').pop().toLowerCase();
        
        if (fileExtension === 'txt' || fileName.indexOf('.') === -1) {
            openTextEditor(fileName);
        } else {
            const modal = document.getElementById('preview-modal');
            const previewContent = document.getElementById('preview-content');
            previewContent.innerHTML = ''; // Очищаем содержимое перед загрузкой нового файла

            const imageFormats = ['jpeg', 'jpg', 'gif', 'png', 'webp', 'bmp', 'tiff', 'svg'];
            const videoFormats = ['mp4', 'webm', 'ogg', 'mov', 'avi', 'wmv', 'flv', 'mkv'];
            const audioFormats = ['mp3', 'wav', 'ogg', 'aac', 'flac', 'm4a'];
            const modelFormats = ['stl', 'obj', 'fbx', 'gltf', 'glb', 'usd', 'usdc', 'usdz', '3ds', 'dae', 'ply', 'x3d'];
            const documentFormats = ['docx', 'odt', 'rtf', 'txt'];

            if (modelFormats.includes(fileExtension)) {
                initThreeJS();
                isOpened = true;
                animate();
                loadModel(`/download/${fileName}`, fileExtension);
            } else if (imageFormats.includes(fileExtension)) {
                previewContent.innerHTML = `
                    <div class="preview-image-container">
                        <img src="/download/${fileName}" alt="${fileName}" class="preview-image">
                    </div>
                `;
                setupImageZoom();
            } else if (videoFormats.includes(fileExtension)) {
                previewContent.innerHTML = `<video src="/download/${fileName}" controls class="preview-video"></video>`;
            } else if (audioFormats.includes(fileExtension)) {
                previewContent.innerHTML = `<audio src="/download/${fileName}" controls class="preview-audio"></audio>`;
            } else if (fileExtension === 'pdf') {
                await loadPDF(`/download/${fileName}`);
            } else if (documentFormats.includes(fileExtension)) {
                await loadDocument(`/download/${fileName}`, fileExtension);
            } else if (['xls', 'xlsx'].includes(fileExtension)) {
                await loadExcel(`/download/${fileName}`);
            } else {
                previewContent.innerHTML = `<div class="preview-text">Предпросмотр недоступен для этого типа файла</div>`;
            }

            modal.style.display = 'block';
        }
    });
});

function setupImageZoom() {
    const container = document.querySelector('.preview-image-container');
    const img = container.querySelector('.preview-image');
    let scale = 1;
    let isDragging = false;
    let startX, startY, translateX = 0, translateY = 0;

    img.addEventListener('load', resetZoom);

    container.addEventListener('wheel', (e) => {
        e.preventDefault();
        const rect = container.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        const delta = e.deltaY > 0 ? 0.9 : 1.1;
        const newScale = scale * delta;
        
        if (newScale >= 0.5 && newScale <= 5) {
            const scaleChange = newScale / scale;
            translateX = mouseX - (mouseX - translateX) * scaleChange;
            translateY = mouseY - (mouseY - translateY) * scaleChange;
            scale = newScale;
            updateImageTransform();
        }
    });

    container.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX - translateX;
        startY = e.clientY - translateY;
        container.style.cursor = 'grabbing';
    });

    container.addEventListener('mousemove', (e) => {
        if (isDragging) {
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            updateImageTransform();
        }
    });

    container.addEventListener('mouseup', () => {
        isDragging = false;
        container.style.cursor = 'grab';
    });

    container.addEventListener('mouseleave', () => {
        isDragging = false;
        container.style.cursor = 'grab';
    });

    function updateImageTransform() {
        const containerRect = container.getBoundingClientRect();
        const imgRect = img.getBoundingClientRect();

        const scaledWidth = img.naturalWidth * scale;
        const scaledHeight = img.naturalHeight * scale;

        const maxTranslateX = Math.max(0, (scaledWidth - containerRect.width) / 2);
        const maxTranslateY = Math.max(0, (scaledHeight - containerRect.height) / 2);

        translateX = Math.max(-maxTranslateX, Math.min(maxTranslateX, translateX));
        translateY = Math.max(-maxTranslateY, Math.min(maxTranslateY, translateY));

        img.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
    }

    function resetZoom() {
        scale = 1;
        translateX = 0;
        translateY = 0;
        updateImageTransform();
        container.style.cursor = 'grab';
    }

    container.addEventListener('dblclick', resetZoom);

    // Поддержка касаний для мобильных устройств
    let lastTouchDistance = 0;

    container.addEventListener('touchstart', (e) => {
        if (e.touches.length === 2) {
            lastTouchDistance = getTouchDistance(e.touches);
        } else if (e.touches.length === 1) {
            isDragging = true;
            startX = e.touches[0].clientX - translateX;
            startY = e.touches[0].clientY - translateY;
        }
    });

    container.addEventListener('touchmove', (e) => {
        e.preventDefault();
        if (e.touches.length === 2) {
            const currentDistance = getTouchDistance(e.touches);
            const delta = currentDistance / lastTouchDistance;
            lastTouchDistance = currentDistance;

            const newScale = scale * delta;
            if (newScale >= 0.5 && newScale <= 5) {
                const rect = container.getBoundingClientRect();
                const centerX = (e.touches[0].clientX + e.touches[1].clientX) / 2 - rect.left;
                const centerY = (e.touches[0].clientY + e.touches[1].clientY) / 2 - rect.top;

                const scaleChange = newScale / scale;
                translateX = centerX - (centerX - translateX) * scaleChange;
                translateY = centerY - (centerY - translateY) * scaleChange;
                scale = newScale;
                updateImageTransform();
            }
        } else if (e.touches.length === 1 && isDragging) {
            translateX = e.touches[0].clientX - startX;
            translateY = e.touches[0].clientY - startY;
            updateImageTransform();
        }
    });

    container.addEventListener('touchend', () => {
        isDragging = false;
        lastTouchDistance = 0;
    });

    function getTouchDistance(touches) {
        return Math.hypot(
            touches[0].clientX - touches[1].clientX,
            touches[0].clientY - touches[1].clientY
        );
    }
}

// Обновите функцию закрытия модального окна
function closeModal() {
    const modal = document.getElementById('preview-modal');
    const previewContent = document.getElementById('preview-content');
    modal.style.display = 'none';
    isOpened = false;
    
    // Сброс масштаба изображения
    const img = previewContent.querySelector('.preview-image');
    if (img) {
        img.style.transform = 'translate(0, 0) scale(1)';
    }

    // Очищаем содержимое
    previewContent.innerHTML = '';

    // Очистка Three.js сцены
    if (renderer) {
        renderer.dispose();
        if (object) {
            scene.remove(object);
            if (object.geometry) object.geometry.dispose();
            if (object.material) object.material.dispose();
        }
        scene = null;
        camera = null;
        renderer = null;
        object = null;
    }
}

// Drag & Drop functionality
const dropArea = document.getElementById('drop-area');
const fileInput = document.getElementById('file');

['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, unhighlight, false);
});

function highlight() {
    dropArea.classList.add('highlight');
}

function unhighlight() {
    dropArea.classList.remove('highlight');
}

dropArea.addEventListener('drop', handleDrop, false);

function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
}

dropArea.addEventListener('click', () => fileInput.click());

fileInput.addEventListener('change', function() {
    handleFiles(this.files);
});

function handleFiles(files) {
    const formData = new FormData();
    formData.append('file', files[0]);
    
    axios.post('/upload', formData, {
        headers: {
            'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: progressEvent => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            updateProgressBar(percentCompleted);
        }
    }).then(response => {
        console.log('Upload successful');
        window.location.reload();
    }).catch(error => {
        console.error('Error:', error);
        alert('Произошла ошибка при загрузке файла');
    });
}

function updateProgressBar(percent) {
    const progressBar = document.getElementById('progress-bar');
    const progressBarContainer = document.getElementById('progress-bar-container');
    progressBarContainer.style.display = 'block';
    progressBar.style.width = percent + '%';
    if (percent >= 100) {
        setTimeout(() => {
            progressBarContainer.style.display = 'none';
        }, 1000);
    }
}
</script>
</body>
</html>